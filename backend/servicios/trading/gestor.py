"""M√≥dulo Fachada para la Gesti√≥n del Ciclo de Vida de √ìrdenes.

Este m√≥dulo proporciona la API p√∫blica de alto nivel para interactuar con el
subsistema de trading. Act√∫a como una fachada que simplifica la creaci√≥n y
cancelaci√≥n de √≥rdenes, orquestando las interacciones entre la billetera,
el libro de √≥rdenes y el motor de ejecuci√≥n.

A diferencia de `procesador.py`, que maneja datos de formularios, este m√≥dulo
ofrece una interfaz m√°s abstracta y program√°tica.

Responsabilidades Clave:
-   `crear_orden`: Orquesta la validaci√≥n, reserva de fondos y persistencia de
    una nueva orden. Ejecuta inmediatamente las √≥rdenes de mercado.
-   `cancelar_orden_pendiente`: Gestiona la cancelaci√≥n de una orden, liberando
    los fondos reservados y actualizando su estado.
"""
from typing import Dict, Any
from decimal import Decimal
from datetime import datetime

from backend.acceso_datos.datos_billetera import cargar_billetera, guardar_billetera
from backend.acceso_datos.datos_ordenes import cargar_ordenes_pendientes, guardar_ordenes_pendientes
from backend.utils.responses import crear_respuesta_error, crear_respuesta_exitosa
from backend.utils.utilidades_numericas import a_decimal, formato_cantidad_cripto
from backend.servicios.estado_billetera import estado_actual_completo
import config

def crear_orden(
    par: str,
    tipo_orden: str,
    accion: str,
    cantidad: Decimal,
    precio_limite: Decimal | None = None,
    precio_disparo: Decimal | None = None,
) -> Dict[str, Any]:
    """Orquesta la creaci√≥n y posible ejecuci√≥n inmediata de una orden.

    Esta funci√≥n es la puerta de entrada para crear cualquier tipo de orden.
    Su pipeline es el siguiente:
    1.  Delega la creaci√≥n del objeto `orden` al `motor`.
    2.  Carga la billetera y valida que haya fondos suficientes.
    3.  Reserva los fondos necesarios (mueve de 'disponible' a 'reservado').
    4.  Si es una orden de mercado, la ejecuta inmediatamente.
    5.  Persiste la orden (nueva o actualizada) y la billetera.

    Args:
        par: El par de trading (ej. "BTC/USDT").
        tipo_orden: 'market', 'limit', 'stop_loss', etc.
        accion: 'compra' o 'venta'.
        cantidad: La cantidad de la moneda base a operar.
        precio_limite: El precio para √≥rdenes 'limit'.
        precio_disparo: El precio para √≥rdenes 'stop'.

    Returns:
        Un diccionario que representa la orden creada o un mensaje de error.
    """
    # Importaci√≥n local para romper una dependencia circular entre `gestor` y `motor`.
    # `gestor` orquesta y llama a `motor`, pero `motor` podr√≠a necesitar
    # en el futuro funcionalidades de `gestor`.
    from backend.servicios.trading.motor import _crear_nueva_orden, _ejecutar_orden_pendiente

    nueva_orden = _crear_nueva_orden(par, tipo_orden, accion, cantidad, precio_limite, precio_disparo)

    if config.ESTADO_ERROR in nueva_orden:
        return nueva_orden

    billetera = cargar_billetera()
    moneda_a_reservar = nueva_orden["moneda_reservada"]
    cantidad_a_reservar = a_decimal(nueva_orden["cantidad_reservada"])

    # Verificaci√≥n robusta de fondos disponibles
    if billetera.get(moneda_a_reservar, {}).get('saldos', {}).get('disponible', Decimal('0')) < cantidad_a_reservar:
        return {config.ESTADO_ERROR: f"Fondos insuficientes de {moneda_a_reservar}."}

    # Reservar fondos
    billetera[moneda_a_reservar]['saldos']['disponible'] -= cantidad_a_reservar
    billetera[moneda_a_reservar]['saldos']['reservado'] += cantidad_a_reservar

    # Las √≥rdenes de mercado se ejecutan inmediatamente
    if nueva_orden["tipo_orden"] == config.TIPO_ORDEN_MERCADO:
        print(f"üìà Orden de mercado detectada ({nueva_orden['id_orden']}). Ejecutando inmediatamente...")
        billetera = _ejecutar_orden_pendiente(nueva_orden, billetera)

        # Persistir los cambios en la billetera y la lista de √≥rdenes
    todas_las_ordenes = cargar_ordenes_pendientes()
    
    # Reemplazar la orden si ya existe (caso de orden de mercado que se actualiz√≥) o a√±adirla si es nueva
    orden_existente_idx = next((i for i, o in enumerate(todas_las_ordenes) if o.get("id_orden") == nueva_orden['id_orden']), -1)
    if orden_existente_idx != -1:
        todas_las_ordenes[orden_existente_idx] = nueva_orden
    else:
        todas_las_ordenes.append(nueva_orden)
    
    guardar_ordenes_pendientes(todas_las_ordenes)
    guardar_billetera(billetera)

    print(f"‚úÖ Orden {nueva_orden['id_orden']} creada exitosamente.")
    return nueva_orden


def cancelar_orden_pendiente(id_orden: str) -> Dict[str, Any]:
    """Cancela una orden pendiente y libera los fondos asociados.

    Pipeline de cancelaci√≥n:
    1.  Busca la orden por su ID en la lista de √≥rdenes pendientes.
    2.  Valida que la orden exista y est√© en estado 'pendiente'.
    3.  Carga la billetera y realiza una comprobaci√≥n de consistencia de fondos.
    4.  Libera los fondos (mueve de 'reservado' a 'disponible').
    5.  Actualiza el estado de la orden a 'cancelada'.
    6.  Persiste la lista de √≥rdenes y la billetera.
    7.  Devuelve una respuesta detallada para el frontend.

    Args:
        id_orden: El identificador √∫nico de la orden a cancelar.

    Returns:
        Una respuesta estandarizada de √©xito o error.
    """
    todas_las_ordenes = cargar_ordenes_pendientes()
    orden_a_cancelar = next((o for o in todas_las_ordenes if o.get("id_orden") == id_orden), None)

    if not orden_a_cancelar:
        return crear_respuesta_error(f"No se encontr√≥ una orden con el ID {id_orden}.")

    estado_actual = orden_a_cancelar.get("estado")
    if estado_actual != config.ESTADO_PENDIENTE:
        mensaje = f"La orden {id_orden} no puede ser cancelada porque su estado es '{estado_actual}', no '{config.ESTADO_PENDIENTE}'."
        return crear_respuesta_error(mensaje)

    billetera = cargar_billetera()
    moneda_reservada = orden_a_cancelar["moneda_reservada"]
    cantidad_reservada = a_decimal(orden_a_cancelar["cantidad_reservada"])

    activo_en_billetera = billetera.get(moneda_reservada)

    # Verificaci√≥n de consistencia: se asegura de que los fondos reservados en la
    # billetera sean suficientes para cubrir la cantidad que la orden dice tener reservada.
    # Si no, marca la orden con un error para investigaci√≥n manual.
    if not activo_en_billetera or a_decimal(activo_en_billetera.get("saldos", {}).get("reservado", Decimal('0'))) < cantidad_reservada:
        orden_a_cancelar["estado"] = config.ESTADO_ERROR
        orden_a_cancelar["mensaje_error"] = "Error de consistencia: los fondos a liberar no coinciden con la billetera."
        guardar_ordenes_pendientes(todas_las_ordenes)
        return crear_respuesta_error(orden_a_cancelar["mensaje_error"])

    # 2. Liberar fondos: se revierte la reserva en la billetera.
    activo_en_billetera["saldos"]["reservado"] -= cantidad_reservada
    activo_en_billetera["saldos"]["disponible"] += cantidad_reservada

    # 3. Actualizar estado de la orden.
    orden_a_cancelar["estado"] = config.ESTADO_CANCELADA
    orden_a_cancelar["timestamp_cancelacion"] = datetime.now().isoformat()

    # 4. Persistir todos los cambios de estado.
    guardar_ordenes_pendientes(todas_las_ordenes)
    guardar_billetera(billetera)

    # 5. Construir y devolver una respuesta clara para el frontend.
    # Se incluye el estado completo del activo modificado para que la UI
    # pueda refrescarse sin necesidad de una nueva llamada.
    mensaje_exito = f"Orden {orden_a_cancelar['par']} cancelada. Se liberaron {formato_cantidad_cripto(cantidad_reservada)} {moneda_reservada}."
    
    billetera_actualizada_completa = estado_actual_completo()
    activo_modificado = next((a for a in billetera_actualizada_completa if a['ticker'] == moneda_reservada), None)

    datos_exito = {
        "orden_cancelada": orden_a_cancelar,
        "activo_actualizado": activo_modificado
    }
    return crear_respuesta_exitosa(datos_exito, mensaje_exito)