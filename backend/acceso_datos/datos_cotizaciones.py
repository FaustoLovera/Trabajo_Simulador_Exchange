"""
M√≥dulo de acceso a datos de cotizaciones.

Este m√≥dulo utiliza un diccionario a nivel de m√≥dulo como cach√© de precios para
mayor simplicidad y claridad. El cach√© se carga bajo demanda.

Expone p√∫blicamente:
- obtener_precio(ticker): Obtiene el precio de una cripto, usando el cach√©.
- recargar_cache_precios(): Fuerza la recarga del cach√© desde el archivo.
- cargar_datos_cotizaciones(): Carga la lista de cotizaciones desde el archivo.
- guardar_datos_cotizaciones(data): Guarda las cotizaciones y actualiza el cach√©.
"""

import json
import os
from decimal import Decimal
from typing import Any

from config import COTIZACIONES_PATH

# El cach√© es ahora un diccionario expl√≠cito a nivel de m√≥dulo.
_cache_precios: dict[str, Decimal] = {}

def recargar_cache_precios(ruta_archivo=COTIZACIONES_PATH):
    """
    Lee el archivo JSON y puebla el cach√© de precios.
    Esta funci√≥n ahora es p√∫blica y puede ser llamada desde los tests para
    inyectar diferentes fuentes de datos.
    """
    global _cache_precios
    print(f"üîÑ Recargando cach√© de precios desde '{ruta_archivo}'...")

    if not os.path.exists(ruta_archivo) or os.path.getsize(ruta_archivo) == 0:
        lista_criptos = []
    else:
        try:
            with open(ruta_archivo, "r", encoding="utf-8") as f:
                lista_criptos = json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            print(f"‚ö†Ô∏è No se pudo leer el archivo de cotizaciones en '{ruta_archivo}'. Se usar√° una lista vac√≠a.")
            lista_criptos = []

    _cache_precios = {
        cripto.get("ticker", "").upper(): Decimal(str(cripto.get("precio_usd", "0")))
        for cripto in lista_criptos
        if cripto.get("ticker")  # Asegurarse de que el ticker no sea None o vac√≠o
    }
    print("‚úÖ Cach√© de precios actualizado en memoria.")

def obtener_precio(ticker: str) -> Decimal | None:
    """
    Obtiene el precio desde el cach√©. Si est√° vac√≠o, lo carga primero.
    """
    if not _cache_precios:
        recargar_cache_precios()
    
    return _cache_precios.get(ticker.upper())

def cargar_datos_cotizaciones(ruta_archivo=COTIZACIONES_PATH) -> list[dict]:
    """
    Carga la lista completa de cotizaciones desde el archivo.
    Esto es necesario para el m√≥dulo de presentaci√≥n que formatea todos los datos.
    """
    if not os.path.exists(ruta_archivo) or os.path.getsize(ruta_archivo) == 0:
        return []
    try:
        with open(ruta_archivo, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []

def guardar_datos_cotizaciones(data: list[dict[str, Any]], ruta_archivo=COTIZACIONES_PATH):
    """
    Guarda los datos de cotizaciones en el archivo.
    Despu√©s de guardar, fuerza autom√°ticamente la recarga del cach√© en memoria si
    la ruta de guardado es la misma que la de configuraci√≥n principal.
    """
    os.makedirs(os.path.dirname(ruta_archivo), exist_ok=True)
    print(f"üíæ Guardando datos en '{ruta_archivo}'...")
    try:
        with open(ruta_archivo, "w", encoding="utf-8") as archivo:
            json.dump(data, archivo, indent=4)
        print("‚úÖ Datos de cotizaciones guardados en archivo.")
        
        # Si la ruta guardada es la misma que la de configuraci√≥n, recargamos el cach√© global.
        if ruta_archivo == COTIZACIONES_PATH:
            recargar_cache_precios()
            
    except (IOError, TypeError) as e:
        print(f"‚ùå Error al guardar el archivo de cotizaciones: {e}")