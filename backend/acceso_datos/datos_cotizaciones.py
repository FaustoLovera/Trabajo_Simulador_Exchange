"""
M√≥dulo de acceso a datos de cotizaciones.

Este m√≥dulo utiliza un patr√≥n de f√°brica (closure) para gestionar un cach√© de precios
en memoria de forma segura, evitando el uso de variables globales expl√≠citas.

Expone p√∫blicamente:
- obtener_precio(ticker): Obtiene el precio de una cripto, usando el cach√©.
- cargar_datos_cotizaciones(): Carga la lista de cotizaciones desde el archivo.
- guardar_datos_cotizaciones(data): Guarda las cotizaciones en el archivo y
  autom√°ticamente actualiza el cach√©.
"""

import json
import os
from decimal import Decimal
from typing import Callable, Tuple, Any

from config import COTIZACIONES_PATH


# Funci√≥n f√°brica
def _crear_gestor_cache_precios() -> Tuple[Callable[[str], Decimal | None], Callable[[], None]]:
    """
    Funci√≥n de f√°brica interna que crea un gestor de cach√© de precios.

    Usa un closure para encapsular el diccionario del cach√© (_cache), protegi√©ndolo
    del acceso externo y eliminando la necesidad de variables globales o de m√≥dulo.

    Returns:
        Una tupla con dos funciones que operan sobre el mismo cach√© encapsulado:
        - La funci√≥n para obtener un precio.
        - La funci√≥n para forzar una recarga del cach√©.
    """
    _cache = {}  # Este diccionario es privado y solo vive en este m√≥dulo.

    def _recargar_desde_archivo():
        """
        Funci√≥n interna y privada que lee el archivo JSON y puebla el cach√©.
        Modifica la variable `_cache` de su closure.
        """
        nonlocal _cache
        print("üîÑ Recargando cach√© de precios desde el archivo...")
        
        if not os.path.exists(COTIZACIONES_PATH) or os.path.getsize(COTIZACIONES_PATH) == 0:
            lista_criptos = []
        else:
            try:
                with open(COTIZACIONES_PATH, "r", encoding="utf-8") as f:
                    lista_criptos = json.load(f)
            except (json.JSONDecodeError, FileNotFoundError):
                lista_criptos = []
        
        _cache = {
            cripto.get("ticker", "").upper(): Decimal(str(cripto.get("precio_usd", "0")))
            for cripto in lista_criptos
        }
        print("‚úÖ Cach√© de precios actualizado en memoria.")

    def obtener_precio_desde_cache(ticker: str) -> Decimal | None:
        """
        Obtiene el precio de un ticker desde el cach√©.
        Si el cach√© est√° vac√≠o, dispara la recarga la primera vez.
        """
        if not _cache:
            _recargar_desde_archivo()
        
        return _cache.get(ticker.upper())

    def forzar_recarga_cache():
        """Funci√≥n p√∫blica para forzar la recarga del cach√©."""
        _recargar_desde_archivo()

    # La f√°brica devuelve las dos funciones que el resto de la app usar√°.
    return obtener_precio_desde_cache, forzar_recarga_cache

# --- Punto de Entrada del M√≥dulo ---

# 1. Llamamos a la f√°brica UNA SOLA VEZ cuando se importa este m√≥dulo.
# 2. Se crea un cach√© privado y dos funciones ('_obtener', '_recargar') que lo gestionan.
# 3. Asignamos esas funciones a nombres a nivel de m√≥dulo que ser√°n exportados.
_obtener, _recargar = _crear_gestor_cache_precios()


# --- API P√∫blica del M√≥dulo ---

def obtener_precio(ticker: str) -> Decimal | None:
    """
    Interfaz p√∫blica para obtener el precio de una criptomoneda desde el cach√©.
    """
    return _obtener(ticker)


def cargar_datos_cotizaciones() -> list[dict]:
    """
    Interfaz p√∫blica para cargar la lista completa de cotizaciones desde el archivo.
    Esto es necesario para el m√≥dulo de presentaci√≥n que formatea todos los datos.
    """
    if not os.path.exists(COTIZACIONES_PATH) or os.path.getsize(COTIZACIONES_PATH) == 0:
        return []
    try:
        with open(COTIZACIONES_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []


def guardar_datos_cotizaciones(data: list[dict[str, Any]]):
    """
    Interfaz p√∫blica para guardar los datos de cotizaciones en el archivo.
    Despu√©s de guardar, fuerza autom√°ticamente la recarga del cach√© en memoria.
    """
    os.makedirs(os.path.dirname(COTIZACIONES_PATH), exist_ok=True)
    print("üíæ Guardando datos en datos_cotizaciones.json...")
    try:
        with open(COTIZACIONES_PATH, "w") as archivo:
            # Usar un default handler para convertir Decimal a float en la serializaci√≥n.
            # Esto es solo si los datos de entrada contienen Decimals, lo cual no deber√≠a ser el caso.
            json.dump(data, archivo, indent=4)
        print("‚úÖ Datos de cotizaciones guardados en archivo.")
        # Llama a la funci√≥n de recarga para mantener el cach√© sincronizado.
        _recargar()
    except (IOError, TypeError) as e:
        print(f"‚ùå Error al guardar el archivo de cotizaciones: {e}")