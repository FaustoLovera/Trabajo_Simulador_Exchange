==================================================
=== REPORTE DE ANÁLISIS DE CÓDIGO ===
Proyecto: Trabajo_Simulador_Exchange
Ruta: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange
Generado el: Fri Jun 20 21:08:21 -03 2025
==================================================

--- INFORMACIÓN DEL REPOSITORIO GIT ---
Rama actual: dev
Último commit: dde52ab - Refactorizacion. Organizacion de codigo de trading vista y logica. Mejora del FORM (andreiveisuade, 40 minutes ago)
---

--- ESTRUCTURA DEL DIRECTORIO ---
.
├── .gitignore
├── backend
│   ├── __init__.py
│   ├── acceso_datos
│   │   ├── datos_billetera.py
│   │   ├── datos_cotizaciones.py
│   │   └── datos_historial.py
│   ├── app.py
│   ├── rutas
│   │   ├── __init__.py
│   │   ├── api_externa.py
│   │   ├── billetera_vista.py
│   │   ├── home.py
│   │   └── trading_vista.py
│   ├── servicios
│   │   ├── __init__.py
│   │   ├── api_cotizaciones.py
│   │   ├── cotizaciones.py
│   │   ├── estado_billetera.py
│   │   ├── trading_logica.py
│   │   ├── trading_models.py
│   │   └── velas_logica.py
│   ├── swagger.yaml
│   └── utils
│       └── formateo_decimales.py
├── config.py
├── datos
│   ├── billetera.json
│   ├── cotizaciones.json
│   └── velas.json
├── documentacion.md
├── frontend
│   ├── static
│   │   ├── css
│   │   ├── img
│   │   └── js
│   └── templates
│       ├── billetera.html
│       ├── fragmento_billetera.html
│       ├── fragmento_historial.html
│       ├── fragmento_tabla.html
│       ├── index.html
│       └── trading.html
├── README.md
└── requirements.txt

13 directories, 33 files
---



==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/.gitignore 

# ARCHIVOS PROPIOS NUESTROS
/datos/datos_cotizaciones.json
/datos/datos_velas.json
/datos/billetera.json
/datos/historial_operaciones.json


# Python
__pycache__/
backend/__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
.env
.venv
env/
venv/
ENV/
.pytest_cache/
.coverage
coverage.xml
*.cover
.hypothesis/

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
__MACOSX/

# IDEs and editors
.idea/
.vscode/
*.swp
*.swo
.project
.classpath
*.sublime-workspace
*.sublime-project

# Frontend
node_modules/
/dist
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.env.local
.env.*.local
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

# Database
*.sqlite
*.sqlite3
*.db

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Backup files
*.bak
*.backup
*~

# Environment variables
.env
.env.*
!.env.example

# System Files
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
datos/billetera.json
datos/datos_cotizaciones.json
datos/datos_velas.json
*.pyc
# D2 files
*.d2
diagrama.png


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/__init__.py 

from flask import Flask
from config import FLASK_SECRET_KEY
from backend.utils.formateo_decimales import registrar_filtros
from backend.rutas import registrar_rutas


def crear_app():
    app = Flask(
        __name__,
        static_folder="../frontend/static",
        template_folder="../frontend/templates",
    )

    app.secret_key = FLASK_SECRET_KEY

    registrar_filtros(app)
    registrar_rutas(app)

    return app


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/acceso_datos/datos_billetera.py 

import json
import os
from decimal import Decimal, InvalidOperation
from config import BILLETERA_PATH, BALANCE_INICIAL_USDT


def cargar_billetera():
    """
    Carga la billetera desde el archivo JSON de forma segura.
    Si el archivo no existe, está vacío o corrupto, crea una billetera inicial.
    """
    os.makedirs(os.path.dirname(BILLETERA_PATH), exist_ok=True)

    if not os.path.exists(BILLETERA_PATH) or os.path.getsize(BILLETERA_PATH) == 0:
        billetera_inicial = {"USDT": Decimal(BALANCE_INICIAL_USDT)}
        guardar_billetera(billetera_inicial)
        return billetera_inicial

    try:
        with open(BILLETERA_PATH, "r", encoding="utf-8") as f:
            datos_cargados = json.load(f)
            # Convierte todos los valores a Decimal, manejando posibles errores
            billetera = {}
            for ticker, cantidad_str in datos_cargados.items():
                try:
                    billetera[ticker] = Decimal(str(cantidad_str))
                except InvalidOperation:
                    print(
                        f"Advertencia: Valor inválido para {ticker} en billetera.json. Se usará 0."
                    )
                    billetera[ticker] = Decimal("0")
            return billetera
    except (json.JSONDecodeError, FileNotFoundError):
        print(
            f"Advertencia: Archivo '{BILLETERA_PATH}' corrupto. Se reiniciará la billetera."
        )
        billetera_inicial = {"USDT": Decimal(BALANCE_INICIAL_USDT)}
        guardar_billetera(billetera_inicial)
        return billetera_inicial


def guardar_billetera(billetera):
    """
    Guarda el estado de la billetera en el archivo JSON.
    Convierte los valores Decimal a string para preservar la precisión.
    """
    os.makedirs(os.path.dirname(BILLETERA_PATH), exist_ok=True)

    # Prepara la billetera para ser guardada, convirtiendo Decimal a string
    billetera_serializable = {
        ticker: str(cantidad) for ticker, cantidad in billetera.items()
    }

    with open(BILLETERA_PATH, "w", encoding="utf-8") as f:
        json.dump(billetera_serializable, f, indent=4)


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/acceso_datos/datos_cotizaciones.py 

import json
import os
from decimal import Decimal, InvalidOperation
from config import COTIZACIONES_PATH


def obtener_precio(ticker):
    """
    Obtiene el precio de un ticker específico desde el archivo de cotizaciones.
    Devuelve el precio como un objeto Decimal, o None si no se encuentra.
    """
    cotizaciones = _cargar_todas_las_cotizaciones()
    ticker_lower = ticker.lower()

    for cripto in cotizaciones:
        if cripto.get("ticker", "").lower() == ticker_lower:
            # Aseguramos que devolvemos un Decimal válido
            try:
                return Decimal(str(cripto.get("precio_usd")))
            except (InvalidOperation, TypeError):
                return Decimal("0")  # Devuelve 0 si el precio es inválido

    return None  # Retorna None si el ticker no se encuentra en la lista


def _cargar_todas_las_cotizaciones():
    """
    Función interna y segura para cargar todas las cotizaciones.
    Maneja archivos inexistentes o corruptos.
    """
    if not os.path.exists(COTIZACIONES_PATH) or os.path.getsize(COTIZACIONES_PATH) == 0:
        return []

    try:
        with open(COTIZACIONES_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/acceso_datos/datos_historial.py 

import json
import os
from datetime import datetime
from decimal import Decimal
from config import HISTORIAL_PATH


def cargar_historial():
    """
    Carga el historial de transacciones desde el archivo JSON.
    Si el archivo no existe, está vacío o corrupto, devuelve una lista vacía.
    """
    if not os.path.exists(HISTORIAL_PATH) or os.path.getsize(HISTORIAL_PATH) == 0:
        return []

    try:
        with open(HISTORIAL_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        print(
            f"Advertencia: No se pudo leer o el archivo '{HISTORIAL_PATH}' está corrupto."
        )
        return []


def guardar_en_historial(
    tipo_operacion,
    moneda_origen,
    cantidad_origen,
    moneda_destino,
    cantidad_destino,
    valor_usd,
):
    """
    Guarda una nueva operación en el historial de transacciones.
    """
    # Asegurarse de que el directorio de datos exista
    os.makedirs(os.path.dirname(HISTORIAL_PATH), exist_ok=True)

    historial = cargar_historial()

    # Crear el diccionario para la nueva operación
    operacion = {
        "id": len(historial) + 1,
        "timestamp": datetime.now().isoformat(),
        "tipo": tipo_operacion,
        "origen": {"ticker": moneda_origen, "cantidad": str(cantidad_origen)},
        "destino": {"ticker": moneda_destino, "cantidad": str(cantidad_destino)},
        "valor_usd": str(valor_usd.quantize(Decimal("0.01"))),
    }

    # Añadir la nueva operación al principio de la lista
    historial.insert(0, operacion)

    # Escribir la lista completa de nuevo en el archivo
    with open(HISTORIAL_PATH, "w", encoding="utf-8") as f:
        json.dump(historial, f, indent=4)


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/app.py 

from flask import render_template
from . import crear_app
from flasgger import Swagger

app = crear_app()
swagger = Swagger(app)

# http://localhost:5000/apidocs
# Para ver la documentacion interactiva

if __name__ == "__main__":
    app.run(debug=True)


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/rutas/__init__.py 

from .home import bp as home_bp
from .trading_vista import bp as trading_bp
from .billetera_vista import bp as billetera_bp
from .api_externa import bp as api_ruta_bp


def registrar_rutas(app):
    app.register_blueprint(home_bp)
    app.register_blueprint(trading_bp)
    app.register_blueprint(billetera_bp)
    app.register_blueprint(api_ruta_bp)


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/rutas/api_externa.py 

from flask import Blueprint, jsonify, render_template
from backend.servicios.api_cotizaciones import obtener_datos_criptos_coingecko
from backend.servicios.cotizaciones import renderizar_fragmento_tabla
from config import VELAS_PATH, COTIZACIONES_PATH
import json

bp = Blueprint("api_externa", __name__, url_prefix="/api")


@bp.route("/actualizar")
def actualizar():
    """
    Actualiza los datos de criptomonedas desde CoinGecko.
    ---
    responses:
      200:
        description: Devuelve estado ok y la cantidad de criptomonedas obtenidas.
        examples:
          application/json: { "estado": "ok", "cantidad": 50 }
    """
    datos = obtener_datos_criptos_coingecko()
    return jsonify({"estado": "ok", "cantidad": len(datos)})


@bp.route("/datos_tabla")
def datos_tabla():
    """
    Retorna el fragmento HTML de la tabla de cotizaciones.
    ---
    responses:
      200:
        description: Fragmento HTML de la tabla renderizado.
        content:
          text/html:
            example: "<tr><td>BTC</td><td>63500</td></tr>"
    """
    return renderizar_fragmento_tabla()


@bp.route("/velas")
def obtener_datos_velas():
    """
    Retorna los datos de velas desde un archivo JSON.
    ---
    responses:
      200:
        description: Datos de velas en formato JSON.
        content:
          application/json:
            example:
              [
                {"timestamp": 1714939200, "open": 65000, "close": 65500, "high": 66000, "low": 64500, "volume": 1200}
              ]
      500:
        description: Error al leer el archivo.
    """
    try:
        with open(VELAS_PATH, "r") as archivo:
            datos = json.load(archivo)
        return jsonify(datos)
    except Exception as e:
        print("❌ Error leyendo datos_velas.json:", e)
        return jsonify({"error": "No se pudo leer el archivo"}), 500


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/rutas/billetera_vista.py 

from flask import Blueprint, render_template, jsonify
from decimal import Decimal, ROUND_DOWN
from backend.servicios.estado_billetera import estado_actual_completo
from backend.acceso_datos.datos_historial import cargar_historial
from backend.acceso_datos.datos_billetera import cargar_billetera

bp = Blueprint("billetera", __name__)


@bp.route("/billetera")
def mostrar_billetera():
    """
    Muestra el estado completo de la billetera en una tabla HTML.
    ---
    responses:
      200:
        description: Renderiza la vista de billetera.
        content:
          text/html:
            example: "<table><tr><td>BTC</td><td>0.5</td></tr></table>"
    """
    datos_billetera = estado_actual_completo()
    return render_template("billetera.html", datos=datos_billetera)


@bp.route("/estado")
def estado():
    """
    Devuelve el contenido actual de la billetera en formato JSON.
    ---
    responses:
      200:
        description: JSON con los saldos actuales.
        content:
          application/json:
            example: { "BTC": 0.5, "ETH": 2.0 }
    """
    return jsonify(cargar_billetera())


@bp.route("/api/billetera")
def render_fragmento_billetera():
    """
    Devuelve un fragmento HTML con los datos detallados de la billetera.
    ---
    responses:
      200:
        description: Fragmento HTML renderizado con estilo de ganancia/pérdida.
        content:
          text/html:
            example: "<tr><td>BTC</td><td style='color:green'>+5%</td></tr>"
    """
    datos = estado_actual_completo()
    for d in datos:
        d["color_ganancia"] = "green" if d["ganancia_perdida"] >= 0 else "red"
        d["color_porcentaje"] = "green" if d["porcentaje_ganancia"] >= 0 else "red"
    return render_template("fragmento_billetera.html", datos=datos)


@bp.route("/api/historial")
def render_fragmento_historial():
    """
    Devuelve un fragmento HTML con el historial de transacciones.
    ---
    responses:
      200:
        description: Fragmento HTML con historial de compras y ventas.
        content:
          text/html:
            example: "<tr><td>compra</td><td>BTC</td><td>0.1</td></tr>"
    """
    historial = cargar_historial()
    for h in historial:
        h["color"] = "green" if h["tipo"] == "compra" else "red"
        h["cantidad"] = str(
            Decimal(h["cantidad"]).quantize(Decimal("0.00000001"), rounding=ROUND_DOWN)
        )
    return render_template("fragmento_historial.html", historial=historial)


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/rutas/home.py 

from flask import Blueprint, render_template
from backend.servicios.api_cotizaciones import obtener_datos_criptos_coingecko

bp = Blueprint("home", __name__)


@bp.route("/")
def index():
    """
    Página principal del simulador de exchange.

    ---
    responses:
      200:
        description: Renderiza la página principal.
        content:
          text/html:
            example: "<html><body>Simulador de exchange</body></html>"
      500:
        description: Error al obtener datos de cotizaciones.
    """
    # 1. Intentamos actualizar los datos desde la API externa.
    #    Si falla, no importa, la página se mostrará con los últimos datos guardados.
    try:
        obtener_datos_criptos_coingecko()
        print("👉 Finalizó la obtención de datos de CoinGecko.")
    except Exception as e:
        print(f"⚠️ Error al obtener datos de CoinGecko: {e}")

    # 2. Cargamos las cotizaciones desde nuestro archivo JSON local.
    #    Ahora Python sabe qué es 'cargar_datos_cotizaciones' porque lo importamos.
    criptos_para_mostrar = cargar_datos_cotizaciones()
    
    # 3. Renderizamos la plantilla, pasándole la lista de criptomonedas.
    return render_template("index.html", criptos=criptos_para_mostrar)


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/rutas/trading_vista.py 


from flask import Blueprint, request, redirect, url_for, render_template, flash

from backend.servicios.trading_logica import procesar_operacion_trading
from backend.servicios.trading_models import preparar_vista_trading

bp = Blueprint("trading", __name__)


# RUTA GET para MOSTRAR la página de trading
@bp.route("/trading", methods=["GET"])
def mostrar_trading_page():
    """Muestra la interfaz principal de trading."""
    contexto = preparar_vista_trading()
    return render_template("trading.html", **contexto)


# RUTA POST para PROCESAR la operación de trading
@bp.route("/trading/operar", methods=["POST"])
def procesar_trading_form():
    """Procesa los datos del formulario de trading."""
    exito, mensaje = procesar_operacion_trading(request.form)
    flash(mensaje, "success" if exito else "danger")

    # Siempre redirige de vuelta a la página principal de trading
    return redirect(url_for("trading.mostrar_trading_page"))


==================================================
=== FILE: /Users/andreiveis/UADE/2do cuatrimestre/05_Algoritmos y Estructura de datos I/Trabajo_Simulador_Exchange/backend/servicios/__init__.py 

